// Code generated by protoc-gen-go. DO NOT EDIT.
// source: checker/checker.proto

package checker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type IP struct {
	Ip                   string          `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Countries            map[string]bool `protobuf:"bytes,2,rep,name=countries,proto3" json:"countries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IP) Reset()         { *m = IP{} }
func (m *IP) String() string { return proto.CompactTextString(m) }
func (*IP) ProtoMessage()    {}
func (*IP) Descriptor() ([]byte, []int) {
	return fileDescriptor_0722a24126c602dc, []int{0}
}

func (m *IP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IP.Unmarshal(m, b)
}
func (m *IP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IP.Marshal(b, m, deterministic)
}
func (m *IP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IP.Merge(m, src)
}
func (m *IP) XXX_Size() int {
	return xxx_messageInfo_IP.Size(m)
}
func (m *IP) XXX_DiscardUnknown() {
	xxx_messageInfo_IP.DiscardUnknown(m)
}

var xxx_messageInfo_IP proto.InternalMessageInfo

func (m *IP) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *IP) GetCountries() map[string]bool {
	if m != nil {
		return m.Countries
	}
	return nil
}

type Response struct {
	IsBlacklisted        bool     `protobuf:"varint,1,opt,name=isBlacklisted,proto3" json:"isBlacklisted,omitempty"`
	Country              string   `protobuf:"bytes,2,opt,name=country,proto3" json:"country,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_0722a24126c602dc, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetIsBlacklisted() bool {
	if m != nil {
		return m.IsBlacklisted
	}
	return false
}

func (m *Response) GetCountry() string {
	if m != nil {
		return m.Country
	}
	return ""
}

func init() {
	proto.RegisterType((*IP)(nil), "checker.IP")
	proto.RegisterMapType((map[string]bool)(nil), "checker.IP.CountriesEntry")
	proto.RegisterType((*Response)(nil), "checker.Response")
}

func init() {
	proto.RegisterFile("checker/checker.proto", fileDescriptor_0722a24126c602dc)
}

var fileDescriptor_0722a24126c602dc = []byte{
	// 287 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0x4f, 0x4b, 0xc3, 0x30,
	0x18, 0xc6, 0x69, 0x86, 0xae, 0x7d, 0x87, 0x43, 0x83, 0x83, 0x52, 0x2f, 0xa3, 0x78, 0xe8, 0xa9,
	0xc1, 0xed, 0x32, 0x86, 0x27, 0x87, 0x42, 0x3d, 0x95, 0xf8, 0x01, 0x24, 0x76, 0x61, 0x0b, 0x2d,
	0x49, 0x48, 0xb2, 0x41, 0x11, 0x2f, 0x9e, 0xbd, 0xf9, 0xd1, 0xfc, 0x0a, 0x7e, 0x10, 0xb1, 0x7f,
	0x9c, 0x3b, 0xe5, 0xf9, 0xe5, 0x4d, 0x9e, 0x27, 0x4f, 0x60, 0x52, 0x6c, 0x79, 0x51, 0x72, 0x43,
	0xba, 0x35, 0xd5, 0x46, 0x39, 0x85, 0x87, 0x1d, 0x46, 0x73, 0xb7, 0x15, 0x66, 0xfd, 0xac, 0x99,
	0x71, 0x35, 0xd9, 0x28, 0xb5, 0xa9, 0x38, 0xd3, 0xc2, 0x76, 0x92, 0x30, 0x2d, 0x08, 0x93, 0x52,
	0x39, 0xe6, 0x84, 0x92, 0xb6, 0xbd, 0x1d, 0x7f, 0x78, 0x80, 0xb2, 0x1c, 0x8f, 0x01, 0x09, 0x1d,
	0x7a, 0x53, 0x2f, 0x09, 0x28, 0x12, 0x1a, 0x2f, 0x20, 0x28, 0xd4, 0x4e, 0x3a, 0x23, 0xb8, 0x0d,
	0xd1, 0x74, 0x90, 0x8c, 0x66, 0x51, 0xda, 0xe7, 0x66, 0x79, 0xba, 0xea, 0x87, 0xf7, 0xd2, 0x99,
	0x9a, 0x1e, 0x0e, 0x47, 0xb7, 0x30, 0x3e, 0x1e, 0xe2, 0x73, 0x18, 0x94, 0xbc, 0xee, 0xcc, 0x7f,
	0x25, 0xbe, 0x84, 0x93, 0x3d, 0xab, 0x76, 0x3c, 0x44, 0x53, 0x2f, 0xf1, 0x69, 0x0b, 0x4b, 0xb4,
	0xf0, 0xe2, 0x47, 0xf0, 0x29, 0xb7, 0x5a, 0x49, 0xcb, 0xf1, 0x35, 0x9c, 0x09, 0x7b, 0x57, 0xb1,
	0xa2, 0xac, 0x84, 0x75, 0x7c, 0xdd, 0x38, 0xf8, 0xf4, 0x78, 0x13, 0x87, 0x30, 0x6c, 0xc3, 0xeb,
	0xc6, 0x2d, 0xa0, 0x3d, 0xce, 0x9e, 0x20, 0xc8, 0xf2, 0x55, 0xfb, 0x66, 0xfc, 0x00, 0xc3, 0x46,
	0x66, 0x1a, 0x8f, 0xfe, 0x15, 0x89, 0x2e, 0xfe, 0xa0, 0xcf, 0x8d, 0xaf, 0xde, 0xbf, 0xbe, 0x3f,
	0xd1, 0x04, 0xfb, 0x64, 0x7f, 0x43, 0x5e, 0x85, 0x7e, 0x5b, 0x1e, 0xea, 0xbd, 0x9c, 0x36, 0xdf,
	0x36, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0x0a, 0x60, 0xb3, 0xfd, 0x8d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IPCheckerClient is the client API for IPChecker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IPCheckerClient interface {
	CheckIp(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Response, error)
}

type iPCheckerClient struct {
	cc grpc.ClientConnInterface
}

func NewIPCheckerClient(cc grpc.ClientConnInterface) IPCheckerClient {
	return &iPCheckerClient{cc}
}

func (c *iPCheckerClient) CheckIp(ctx context.Context, in *IP, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/checker.IPChecker/CheckIp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IPCheckerServer is the server API for IPChecker service.
type IPCheckerServer interface {
	CheckIp(context.Context, *IP) (*Response, error)
}

// UnimplementedIPCheckerServer can be embedded to have forward compatible implementations.
type UnimplementedIPCheckerServer struct {
}

func (*UnimplementedIPCheckerServer) CheckIp(ctx context.Context, req *IP) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckIp not implemented")
}

func RegisterIPCheckerServer(s *grpc.Server, srv IPCheckerServer) {
	s.RegisterService(&_IPChecker_serviceDesc, srv)
}

func _IPChecker_CheckIp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IPCheckerServer).CheckIp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/checker.IPChecker/CheckIp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IPCheckerServer).CheckIp(ctx, req.(*IP))
	}
	return interceptor(ctx, in, info, handler)
}

var _IPChecker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "checker.IPChecker",
	HandlerType: (*IPCheckerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckIp",
			Handler:    _IPChecker_CheckIp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "checker/checker.proto",
}
